------------------------SERVER------------------------------------------------------------

FNZ: setup

// recupero i dati dei messaggi bufferizzati
    while( fgets(buff_info, BUFF_SIZE, fptr)!=NULL && fgets(buff_chat, MSG_LEN, fptr1)!=NULL ) {

        struct message* temp = (struct message*)malloc(sizeof(struct message));
        if (temp == NULL){
            perror("[-]Memory not allocated\n");
            exit(-1);
        }
        sscanf(buff_info, "%s %s %s %s %s", sen, rec, time, grp, st);
        strcpy(temp->sender, sen);
        strcpy(temp->recipient, rec);
        strcpy(temp->time_stamp, time);
        strcpy(temp->text, buff_chat);
        strcpy(temp->group, grp);
        strcpy(temp->status, st);
        temp->next = NULL;
        // aggiungo alla lista dei messaggi
        if(messages == NULL)
            messages = temp;
        else
        {
            struct message* lastNode = messages;
            while(lastNode->next != NULL)
                lastNode = lastNode->next;
            lastNode->next = temp;        
        }
        free(temp);
    }


    // A complete working C program
// to demonstrate deletion in
// singly linked list
#include <stdio.h>
#include <stdlib.h>

// A linked list node
struct Node {
	int data;
	struct Node* next;
};

/* Given a reference (pointer to pointer) to the head of a
list and an int, inserts a new node on the front of the
list. */
void push(struct Node** head_ref, int new_data)
{
	struct Node* new_node
		= (struct Node*)malloc(sizeof(struct Node));
	new_node->data = new_data;
	new_node->next = (*head_ref);
	(*head_ref) = new_node;
}

/* Given a reference (pointer to pointer) to the head of a
list and a key, deletes the first occurrence of key in
linked list */
void deleteNode(struct Node** head_ref, int key)
{
	
}

// This function prints contents of linked list starting
// from the given node
void printList(struct Node* node)
{
	while (node != NULL) {
		printf(" %d ", node->data);
		node = node->next;
	}
}

// Driver code
int main()
{
	/* Start with the empty list */
	struct Node* head = NULL;

	push(&head, 7);
	push(&head, 1);
	push(&head, 3);
	push(&head, 2);

	puts("Created Linked List: ");
	printList(head);
	deleteNode(&head, 1);
	puts("
Linked List after Deletion of 1: ");
	printList(head);
	return 0;
}
